name: CI/CD Pipeline for Smart Collect (Pull Request)

on:
  pull_request:
    branches:
      - master   # Trigger on PRs targeting the master branch
    types:
      - opened
      - synchronize
      - reopened

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 3: Install Python dependencies
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          # pip install -r requirements.txt
          
      # Step 4: Install Google Chrome
      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget "https://storage.googleapis.com/chrome-for-testing-public/131.0.6778.264/linux64/chrome-linux64.zip" -P /tmp
          unzip /tmp/chrome-linux64.zip -d /tmp
          sudo mv /tmp/chrome-linux64 /opt/google-chrome
          sudo ln -s /opt/google-chrome/chrome /usr/local/bin/google-chrome
          google-chrome --version
      
      # Step 5: Install ChromeDriver
      - name: Install ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget "https://storage.googleapis.com/chrome-for-testing-public/131.0.6778.264/linux64/chromedriver-linux64.zip" -P /tmp
          unzip /tmp/chromedriver-linux64.zip -d /tmp
          sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version

      # Step 6: Run Selenium Tests and Generate Report
      - name: Run Selenium Tests and Generate Report
        env: 
          GIT_USERNAME: Gaurimusmade
          GIT_EMAIL: gaurimusmade27@gmail.com
        run: |
          echo "Configuring Git..."
          git config --global user.name "$GIT_USERNAME"
          git config --global user.email "$GIT_EMAIL"

          echo "Running Selenium tests..."
          python main.py

      # Step 8: Fail, Revert PR, and Create Revert Request
      - name: Fail, Revert, and Create Revert PR
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Tests failed. Reverting pull request..."

          # Add a comment to the failing PR
          gh pr comment ${{ github.event.pull_request.number }} --body "ðŸš¨ Tests failed. This PR will be reverted and a revert PR will be created automatically."

          # Close the failing PR
          gh pr close ${{ github.event.pull_request.number }}

          # Check out the branch and revert the changes
          git checkout master
          git pull origin master
          git revert -m 1 $(git log -n 1 --pretty=format:"%H")
          git push origin master

          # Create a revert PR
          gh pr create \
            --title "Revert PR for #${{ github.event.pull_request.number }}" \
            --body "Reverting changes from #${{ github.event.pull_request.number }} due to failing tests." \
            --base master \
            --head master
